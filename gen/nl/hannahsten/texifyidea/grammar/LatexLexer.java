/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int LATEX3 = 26;
  public static final int INLINE_VERBATIM_START = 28;
  public static final int INLINE_VERBATIM = 30;
  public static final int POSSIBLE_VERBATIM_BEGIN = 32;
  public static final int VERBATIM_OPTIONAL_ARG = 34;
  public static final int VERBATIM_START = 36;
  public static final int VERBATIM_END = 38;
  public static final int INLINE_VERBATIM_OPTIONAL_ARG = 40;
  public static final int VERBATIM = 42;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 44;
  public static final int POSSIBLE_VERBATIM_END = 46;
  public static final int PSEUDOCODE = 48;
  public static final int POSSIBLE_PSEUDOCODE_END = 50;
  public static final int OFF = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\57\1\56\1\100\1\0\1\73\1\62\1\76\1\0\1\2"+
    "\1\3\1\54\1\0\1\77\15\0\1\34\1\0\1\74\1\63\1\75\1\0\1\17\1\66\2\33\1\52\1"+
    "\35\1\65\2\33\1\67\2\33\1\71\1\33\1\47\1\42\1\51\1\33\1\50\1\40\1\60\1\72"+
    "\1\33\1\70\1\61\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16\1\12\1\20"+
    "\1\13\1\24\1\14\2\33\1\37\1\46\1\15\1\45\1\36\1\33\1\26\1\55\1\22\1\53\1\44"+
    "\1\43\1\21\1\41\1\33\1\6\1\101\1\7\7\0\1\32\32\0\1\64\337\0\1\64\177\0\13"+
    "\64\35\0\2\32\5\0\1\64\57\0\1\64\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\3\2\1\27\1\30\1\31\1\32\1\1\1\33\1\2"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\2\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\2\53\1\54\1\55\1\56\1\57\1\60\1\2\1\61"+
    "\1\53\1\62\1\63\1\64\21\62\1\15\1\65\1\15"+
    "\1\66\1\62\1\67\1\70\1\71\17\62\2\0\11\62"+
    "\2\0\21\62\1\65\1\0\1\65\1\15\20\62\2\0"+
    "\7\62\1\72\3\62\2\0\1\62\1\73\14\62\1\74"+
    "\1\0\1\65\1\15\15\62\1\74\1\0\1\75\1\76"+
    "\4\62\1\72\4\62\2\0\7\62\1\74\3\62\1\0"+
    "\1\65\1\15\1\77\6\62\1\74\3\62\1\0\5\62"+
    "\1\100\7\62\2\0\1\101\6\62\1\74\3\62\1\0"+
    "\1\65\11\62\1\102\3\62\1\103\6\62\1\0\10\62"+
    "\1\0\1\65\16\62\1\0\6\62\1\0\1\65\13\62"+
    "\1\0\6\62\1\0\1\65\10\62\1\0\4\62\1\0"+
    "\1\65\6\62\1\0\4\62\1\0\1\65\6\62\1\104"+
    "\4\62\1\0\1\105\5\62\1\106\1\107\2\62\1\107"+
    "\5\62\1\110\1\62\1\111\1\62\1\111\17\62\2\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u077a\0\u077a"+
    "\0\u077a\0\u077a\0\u077a\0\u07bc\0\u077a\0\u06f6\0\u077a\0\u07fe"+
    "\0\u077a\0\u077a\0\u0840\0\u0840\0\u077a\0\u077a\0\u077a\0\u077a"+
    "\0\u0882\0\u077a\0\u08c4\0\u0906\0\u0948\0\u077a\0\u077a\0\u077a"+
    "\0\u077a\0\u077a\0\u077a\0\u098a\0\u077a\0\u077a\0\u077a\0\u077a"+
    "\0\u077a\0\u077a\0\u09cc\0\u077a\0\u077a\0\u077a\0\u077a\0\u0a0e"+
    "\0\u077a\0\u077a\0\u077a\0\u077a\0\u077a\0\u0a50\0\u077a\0\u077a"+
    "\0\u0a92\0\u0ad4\0\u077a\0\u0b16\0\u0b58\0\u0b9a\0\u077a\0\u077a"+
    "\0\u077a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u077a\0\u1104\0\u077a"+
    "\0\u077a\0\u077a\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u0c60\0\u245a\0\u249c\0\u24de"+
    "\0\u2520\0\u2562\0\u25a4\0\u0c60\0\u25e6\0\u2628\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc"+
    "\0\u0c60\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u1146\0\u2d1e\0\u077a\0\u0c60\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u0c60\0\u33d2"+
    "\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2"+
    "\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u0c60"+
    "\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0"+
    "\0\u3a02\0\u0c60\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e"+
    "\0\u077a\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u077a"+
    "\0\u3f6c\0\u3fae\0\u3ff0\0\u0c60\0\u4032\0\u4074\0\u40b6\0\u40f8"+
    "\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308"+
    "\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728"+
    "\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938"+
    "\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48"+
    "\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58"+
    "\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68"+
    "\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178"+
    "\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388"+
    "\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598"+
    "\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8"+
    "\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8"+
    "\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u077a\0\u0c60"+
    "\0\u5b86\0\u5bc8\0\u1146\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12"+
    "\0\u1146\0\u5d54\0\u0c60\0\u5d96\0\u1146\0\u5dd8\0\u5e1a\0\u5e5c"+
    "\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\u602a\0\u606c"+
    "\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u0c60\0\u1146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\34\1\61\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\16\34\3\44"+
    "\1\45\21\34\1\46\1\34\1\47\1\44\2\34\1\50"+
    "\1\51\1\45\6\34\1\62\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\34\1\63\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\16\34\3\44\1\45\21\34\1\46"+
    "\1\34\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\45\1\53\1\54\1\55\1\56\1\57\1\60\1\34"+
    "\1\64\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\16\34\3\44\1\45\21\34\1\46\1\34\1\47\1\44"+
    "\2\34\1\50\1\51\1\45\6\34\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\34\1\65\1\36\1\37"+
    "\1\40\1\41\1\42\1\66\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\67\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\34\1\65\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\34\3\44\1\45\21\34\1\46\1\34"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\62"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\34\1\65"+
    "\1\36\1\37\1\40\1\41\1\70\1\71\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\72\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\34\1\65\1\36\1\37\1\40"+
    "\1\41\1\42\1\73\1\44\16\34\3\44\1\45\21\34"+
    "\1\46\1\34\1\47\1\44\2\34\1\50\1\51\1\45"+
    "\6\34\1\45\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\34\1\74\1\36\1\37\1\40\1\41\1\75\1\76"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\72\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\34\1\65\1\36"+
    "\1\37\1\40\1\41\1\77\1\43\1\44\16\34\3\44"+
    "\1\45\21\34\1\46\1\34\1\47\1\44\2\34\1\50"+
    "\1\51\1\45\6\34\1\45\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\34\1\74\1\36\1\37\1\40\1\41"+
    "\1\75\1\100\1\44\16\34\3\44\1\45\21\34\1\46"+
    "\1\34\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\72\1\53\1\54\1\55\1\56\1\57\1\60\1\34"+
    "\1\65\1\36\1\37\1\40\1\41\1\42\1\101\1\44"+
    "\16\34\3\44\1\45\21\34\1\46\1\34\1\47\1\44"+
    "\2\34\1\50\1\51\1\45\6\34\1\45\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\34\1\65\1\36\1\37"+
    "\1\40\1\41\1\75\1\102\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\34\1\103\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\34\3\44\1\45\21\34\1\46\1\34"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\45"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\4\104\1\105"+
    "\1\104\1\106\73\104\102\107\1\110\1\74\1\36\1\37"+
    "\1\40\1\41\1\75\1\66\1\44\16\110\3\44\1\45"+
    "\23\110\1\47\1\44\2\110\1\50\1\51\1\45\6\110"+
    "\1\72\1\53\1\54\1\55\1\56\1\57\1\60\1\34"+
    "\1\65\1\36\1\37\1\111\1\112\1\42\1\43\1\44"+
    "\16\34\3\44\1\45\21\34\1\46\1\34\1\47\1\44"+
    "\2\34\1\50\1\51\1\45\6\34\1\45\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\34\1\65\1\36\1\37"+
    "\1\40\1\41\1\42\1\113\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\34\1\65\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\34\3\44\1\45\21\34\1\46\1\34"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\45"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\34\1\65"+
    "\1\36\1\37\1\111\1\114\1\42\1\43\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\45\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\115\1\116\6\115\1\44\16\115"+
    "\3\44\25\115\1\44\22\115\4\117\1\120\3\117\1\121"+
    "\16\117\3\121\25\117\1\121\22\117\1\122\5\123\1\42"+
    "\2\123\16\122\4\123\23\122\2\123\2\122\3\123\6\122"+
    "\7\123\1\34\1\124\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\34\3\44\1\45\21\34\1\46\1\34"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\125\1\65"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\16\125"+
    "\3\44\1\45\23\125\1\47\1\44\2\125\1\50\1\51"+
    "\1\45\6\125\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\62\115\1\126\17\115\1\34\10\0\16\34\4\0"+
    "\23\34\2\0\2\34\3\0\6\34\7\0\2\127\1\130"+
    "\1\127\1\131\4\127\1\132\1\133\2\134\1\135\1\136"+
    "\1\137\4\134\1\140\1\134\1\141\1\0\1\127\2\0"+
    "\1\134\1\127\1\142\1\143\1\144\4\134\1\145\2\134"+
    "\1\146\1\147\1\150\1\151\1\152\1\127\1\134\2\127"+
    "\2\134\3\127\6\134\7\127\112\0\1\44\16\0\3\44"+
    "\25\0\1\44\22\0\27\153\2\0\25\153\1\154\1\155"+
    "\22\153\6\0\1\156\73\0\4\127\1\131\4\127\1\132"+
    "\1\133\2\134\1\135\1\136\1\137\2\134\1\157\1\134"+
    "\1\140\1\134\1\141\1\0\1\127\2\0\1\134\1\127"+
    "\1\142\1\143\1\144\4\134\1\145\2\134\1\146\1\147"+
    "\1\150\1\151\1\152\1\127\1\134\2\127\2\134\3\127"+
    "\6\134\12\127\1\62\1\131\4\127\1\132\1\133\2\134"+
    "\1\135\1\136\1\137\4\134\1\140\1\134\1\141\1\0"+
    "\1\127\2\0\1\134\1\127\1\142\1\143\1\144\4\134"+
    "\1\145\2\134\1\146\1\147\1\150\1\151\1\152\1\127"+
    "\1\134\2\127\2\134\3\127\6\134\11\127\1\130\1\127"+
    "\1\131\1\160\3\127\1\132\1\133\2\134\1\135\1\136"+
    "\1\137\4\134\1\140\1\134\1\141\1\0\1\127\2\0"+
    "\1\134\1\127\1\142\1\143\1\144\4\134\1\145\2\134"+
    "\1\146\1\147\1\150\1\151\1\152\1\127\1\134\2\127"+
    "\2\134\3\127\6\134\13\127\1\131\4\127\1\132\1\133"+
    "\2\134\1\135\1\136\1\137\4\134\1\140\1\134\1\141"+
    "\1\0\1\127\2\0\1\134\1\127\1\142\1\143\1\144"+
    "\4\134\1\145\2\134\1\146\1\147\1\150\1\151\1\152"+
    "\1\127\1\134\2\127\2\134\3\127\6\134\13\127\1\161"+
    "\1\162\3\127\1\132\1\133\2\134\1\135\1\136\1\137"+
    "\4\134\1\140\1\134\1\141\1\0\1\127\2\0\1\134"+
    "\1\127\1\142\1\143\1\144\4\134\1\145\2\134\1\146"+
    "\1\147\1\150\1\151\1\152\1\127\1\134\2\127\2\134"+
    "\3\127\6\134\13\127\1\131\4\127\4\163\1\164\1\165"+
    "\1\166\4\163\1\167\1\163\1\170\1\0\1\127\2\0"+
    "\2\163\1\171\1\172\1\173\4\163\1\174\2\163\1\175"+
    "\1\176\1\177\1\200\1\201\1\127\1\163\2\127\2\163"+
    "\3\127\6\163\7\127\1\110\10\0\16\110\4\0\23\110"+
    "\2\0\2\110\3\0\6\110\20\0\1\202\1\203\77\0"+
    "\1\121\16\0\3\121\25\0\1\121\22\0\1\122\10\0"+
    "\16\122\4\0\23\122\2\0\2\122\3\0\6\122\7\0"+
    "\2\127\1\130\1\127\1\131\4\127\1\132\1\204\2\134"+
    "\1\135\1\136\1\137\4\134\1\140\1\134\1\141\1\0"+
    "\1\127\2\0\1\134\1\127\1\205\1\143\1\144\4\134"+
    "\1\145\2\134\1\146\1\206\1\207\1\151\1\152\1\127"+
    "\1\134\2\127\2\134\3\127\1\210\1\134\1\211\1\212"+
    "\1\213\1\214\7\127\1\125\10\0\16\125\4\0\23\125"+
    "\2\0\2\125\3\0\6\125\65\0\1\215\1\216\33\0"+
    "\1\134\1\217\14\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\4\134\1\220"+
    "\11\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\16\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\1\134\1\221\14\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\3\134\1\222"+
    "\12\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\3\134\1\223\12\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\15\134\1\224\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\1\134"+
    "\1\225\14\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\10\134\1\226\5\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\14\134\1\227\1\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\134\4\0\1\134\1\0\16\134\1\230\1\0"+
    "\1\231\2\0\2\134\3\0\6\134\20\0\1\134\1\232"+
    "\14\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\1\134\1\233\14\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\1\134\1\234\14\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\15\134\1\235\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\1\134\1\236\14\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\15\134\1\237\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\7\0"+
    "\27\153\2\0\51\153\10\240\1\154\16\240\2\241\1\154"+
    "\4\240\1\242\20\240\1\154\22\240\27\153\2\0\25\153"+
    "\1\243\23\153\11\0\1\134\1\244\14\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\1\163\1\245\14\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\3\163"+
    "\1\246\12\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\3\163\1\247\12\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\15\163"+
    "\1\250\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\1\163\1\251\14\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\10\163\1\252"+
    "\5\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\14\163\1\253\1\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\16\163\4\0"+
    "\20\163\1\254\1\0\1\255\2\0\2\163\3\0\6\163"+
    "\20\0\1\163\1\256\14\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\1\163\1\257\14\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\1\163\1\260\14\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\15\163\1\261\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\1\163\1\262\14\163\4\0\21\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\20\0\15\163\1\263\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\21\0\1\264"+
    "\104\0\1\265\75\0\4\134\1\266\11\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\4\134\1\267\3\134\1\226\5\134\4\0\1\134"+
    "\1\0\2\134\1\270\14\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\1\134\1\271\14\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\15\134\1\272\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\134\4\0"+
    "\1\134\1\0\10\134\1\273\5\134\1\274\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\7\134\1\275\6\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\13\134\1\276\2\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\134\4\0\1\134\1\0\10\134\1\277\6\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\4\134"+
    "\1\300\11\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\17\0\1\215\16\0\3\215"+
    "\4\0\1\301\20\0\1\215\100\0\1\302\34\0\2\134"+
    "\1\303\13\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\5\134\1\304\10\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\16\134\4\0\1\134\1\0\6\134"+
    "\1\305\10\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\15\134\1\306\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\7\134\1\307"+
    "\6\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\1\134\1\310\14\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\4\134\1\135\11\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\1\134\1\311\15\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\11\134\1\312"+
    "\4\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\14\134\1\313\1\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\11\134\1\314\4\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\15\134\1\315\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\16\134\4\0\1\134"+
    "\1\0\6\134\1\316\10\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\4\134\1\146\11\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\134\4\0\1\134\1\0\10\134\1\317\6\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\12\134"+
    "\1\320\3\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\16\134\4\0\1\134"+
    "\1\0\2\134\1\321\14\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\7\0\27\240\2\0\51\240\10\0\1\241"+
    "\16\0\3\241\4\0\1\322\20\0\1\241\22\0\25\240"+
    "\1\323\1\240\2\0\51\240\22\153\1\324\4\153\2\0"+
    "\27\153\1\324\21\153\11\0\10\134\1\325\5\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\16\163\4\0\10\163\1\326\10\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\15\163\1\327"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\7\163\1\330\6\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\1\163\1\331\14\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\4\163\1\164\11\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\16\163\4\0\3\163"+
    "\1\332\15\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\11\163\1\333\4\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\14\163\1\334\1\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\11\163\1\335\4\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\15\163\1\336\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\16\163\4\0\10\163\1\337\10\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\20\0\4\163\1\175\11\163\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\16\163\4\0\12\163\1\340\6\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\20\0\12\163\1\341\3\163\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\16\163\4\0\4\163\1\342\14\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\22\0\1\343\104\0\1\344\74\0"+
    "\5\134\1\345\10\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\5\134\1\346"+
    "\10\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\16\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\347\2\0\2\134\3\0\6\134\20\0"+
    "\4\134\1\146\11\134\4\0\1\134\1\0\1\134\1\350"+
    "\15\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\10\134\1\351\6\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\15\134\1\352"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\4\134\1\353\11\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\3\134\1\354\12\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\16\134"+
    "\4\0\1\134\1\0\10\134\1\355\6\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\11\134\1\356\4\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\34\0\1\357\76\0\1\360\35\0\1\360"+
    "\32\0\3\134\1\361\12\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\1\134"+
    "\1\362\14\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\1\134\1\363\14\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\4\134\1\364\11\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\7\134\1\321\6\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\16\134"+
    "\4\0\1\134\1\0\2\134\1\365\14\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\13\134\1\321\2\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\1\134\1\366\14\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\3\134\1\367\12\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\1\370"+
    "\15\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\16\134\4\0\1\134\1\0"+
    "\15\134\1\371\1\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\16\134\4\0\1\134\1\0\7\134\1\372"+
    "\7\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\2\134\1\373\14\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\34\0\1\374\54\0"+
    "\26\240\1\375\2\0\51\240\12\153\1\376\14\153\2\0"+
    "\4\153\1\376\44\153\11\0\11\134\1\377\4\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\1\163\1\u0100\14\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\1\163\1\u0101"+
    "\14\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\4\163\1\u0102\11\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\7\163\1\342"+
    "\6\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\16\163\4\0\4\163\1\u0103\14\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\13\163\1\342"+
    "\2\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\1\163\1\u0104\14\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\3\163\1\u0105"+
    "\12\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\1\u0106\15\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\16\163\4\0\17\163"+
    "\1\u0107\1\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\16\163\4\0\11\163\1\u0108\7\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\16\163\4\0\4\163"+
    "\1\u0109\14\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\23\0\1\u010a\76\0\16\134\4\0\1\134\1\0\14\134"+
    "\1\u010b\2\134\1\0\1\134\2\0\2\134\3\0\1\u010c"+
    "\1\134\1\u010d\1\u010e\1\u010f\1\134\20\0\1\134\1\u0110"+
    "\14\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\2\134\1\u0111\3\134\20\0\1\134\1\u0112"+
    "\14\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\12\134\1\u0113\3\134\4\0"+
    "\1\134\1\0\7\134\1\372\7\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\16\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\1\134\1\u0114"+
    "\4\134\20\0\12\134\1\u0115\3\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\2\134\1\u0116\14\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\134\4\0"+
    "\1\134\1\0\1\134\1\275\15\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\3\134\1\u0117\12\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\35\0\1\u0118\65\0\1\u0119\22\0\1\u0119\55\0"+
    "\4\134\1\u011a\11\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\4\134\1\u011b"+
    "\11\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\12\134\1\u011c\3\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\1\134\1\u011d\14\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\3\134\1\u011e\13\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\10\134\1\u011f"+
    "\5\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\4\134\1\u0120\11\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\16\134\4\0\1\134\1\0\17\134\1\u0121"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\134\4\0"+
    "\1\134\1\0\10\134\1\u0122\6\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\3\134\1\u0123\12\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\14\134\1\u0124\1\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\35\0"+
    "\1\u0125\53\0\27\240\2\0\24\240\1\u0126\24\240\21\153"+
    "\1\154\5\153\2\0\30\153\1\154\20\153\11\0\4\163"+
    "\1\u0127\11\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\12\163\1\u0128\3\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\1\163"+
    "\1\u0129\14\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\16\163\4\0\5\163\1\u012a\13\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\10\163"+
    "\1\u012b\5\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\4\163\1\u012c\11\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\16\163"+
    "\4\0\21\163\1\u0121\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\16\163\4\0\12\163\1\u012d\6\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\3\163\1\u012e\12\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\14\163\1\u012f\1\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\24\0\1\u0130\75\0\15\134"+
    "\1\u0131\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\16\134\4\0\1\134\1\0"+
    "\10\134\1\u0132\5\134\1\u0133\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\7\134\1\u0134\6\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\13\134\1\u0135\2\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\16\134"+
    "\4\0\1\134\1\0\10\134\1\u0136\6\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\7\134\1\u0110\6\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\14\134\1\u0137\1\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\1\134\1\u0138\14\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\16\134"+
    "\4\0\1\134\1\0\2\134\1\u0139\14\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\11\134\1\u013a\4\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\1\134\1\275\14\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\134\4\0\1\134\1\0\2\134\1\u0134\14\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\64\0\1\u013b"+
    "\45\0\1\215\37\0\1\215\31\0\16\134\4\0\1\134"+
    "\1\0\7\134\1\u013c\7\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\11\134\1\u013d\4\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\10\134\1\u013e\5\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\16\134"+
    "\4\0\1\134\1\0\4\134\1\u013f\12\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\1\134\1\u0140\14\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\16\134\4\0\1\134\1\0\2\134"+
    "\1\u0141\14\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\12\134\1\u0142\3\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\5\134"+
    "\1\u0143\10\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\15\134\1\u0143\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\64\0\1\u0144\24\0\12\240\1\u0145\14\240\2\0"+
    "\51\240\11\0\16\163\4\0\11\163\1\u0146\7\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\11\163\1\u0147"+
    "\4\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\10\163\1\u0148\5\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\16\163\4\0"+
    "\6\163\1\u0149\12\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\1\163\1\u014a\14\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\16\163\4\0"+
    "\4\163\1\u014b\14\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\12\163\1\u014c\3\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\5\163\1\u014d"+
    "\10\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\15\163\1\u014d\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\16\134\4\0\1\134"+
    "\1\0\10\134\1\u014e\6\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\15\134\1\u0134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\4\134\1\u014f\11\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\3\134\1\u0150"+
    "\12\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\16\134\4\0\1\134\1\0"+
    "\10\134\1\u0151\6\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\11\134\1\275\4\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\5\134\1\u0152\10\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\134\4\0"+
    "\1\134\1\0\2\134\1\275\14\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\3\134\1\u0153\12\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\21\0\1\u0154\100\0\3\134\1\u0155\12\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\16\134\4\0\1\134\1\0\2\134\1\u0156"+
    "\14\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\11\134\1\u0157\4\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\4\134\1\u0158"+
    "\11\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\12\134\1\321\3\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\3\134\1\u0159\12\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\16\134\1\u015a\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\1\134\1\316\14\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\21\0\1\u015b\67\0\26\240\1\u015c\2\0"+
    "\51\240\11\0\3\163\1\u015d\12\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\16\163\4\0"+
    "\4\163\1\u015e\14\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\11\163\1\u015f\4\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\4\163\1\u0160"+
    "\11\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\12\163\1\342\3\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\3\163\1\u0161"+
    "\12\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\16\163\4\0\20\163\1\u0162\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\1\163\1\337\14\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\12\134\1\u0163\3\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\12\134"+
    "\1\u0164\3\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\16\134\4\0\1\134"+
    "\1\0\2\134\1\u0165\14\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\16\134\4\0\1\134\1\0\1\134"+
    "\1\u0134\15\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\134\4\0\1\134\1\0\16\134\1\u0166\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\134\4\0"+
    "\1\134\1\0\10\134\1\u0167\6\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\35\0\1\u0168\64\0\15\134\1\u0169"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\20\0\16\134\4\0\1\134\1\0\16\134"+
    "\1\u016a\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\12\134\1\u016b\3\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\11\134\1\u016c"+
    "\4\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\4\134\1\u016d\11\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\16\134\4\0\1\134\1\0\11\134\1\u016e"+
    "\5\134\1\0\1\134\2\0\2\134\3\0\6\134\35\0"+
    "\1\u016f\53\0\10\240\1\u015c\16\240\2\u016f\1\u015c\25\240"+
    "\1\u015c\3\240\1\u0170\16\240\11\0\15\163\1\u0171\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\16\163\4\0\20\163\1\u0172\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\12\163\1\u0173\3\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\11\163"+
    "\1\u0174\4\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\4\163\1\u0175\11\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\16\163"+
    "\4\0\13\163\1\u0176\5\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\1\134\1\u0177\14\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\11\134\1\u0178\4\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\1\134"+
    "\1\u0134\14\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\15\134\1\u0116\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\4\134\1\275\11\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\17\0"+
    "\1\u0168\16\0\3\u0168\25\0\1\u0168\3\0\1\u0179\27\0"+
    "\16\134\4\0\1\134\1\0\10\134\1\u017a\6\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\14\134\1\321"+
    "\1\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\13\134\1\u017b\2\134\4\0"+
    "\1\134\1\0\17\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\14\134\1\u017c\1\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\1\134\1\321\14\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\1\134\1\u017d"+
    "\14\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\17\0\1\u016f\16\0\3\u016f\25\0"+
    "\1\u016f\3\0\1\u017e\16\0\10\240\1\u0170\16\240\2\u017e"+
    "\1\u0170\13\240\1\u017f\11\240\1\u0170\22\240\11\0\16\163"+
    "\4\0\12\163\1\u0180\6\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\14\163\1\342\1\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\13\163"+
    "\1\u0181\2\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\14\163\1\u0182\1\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\1\163"+
    "\1\342\14\163\4\0\21\163\1\0\1\163\2\0\2\163"+
    "\3\0\6\163\20\0\1\163\1\u0183\14\163\4\0\21\163"+
    "\1\0\1\163\2\0\2\163\3\0\6\163\20\0\5\134"+
    "\1\u0184\10\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\3\134\1\u0185\12\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\17\0\1\u0179\16\0\3\u0179\13\0\1\u0186"+
    "\11\0\1\u0179\33\0\4\134\1\u0187\11\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\14\134\1\u0188\1\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\10\134"+
    "\1\u0189\5\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\4\134\1\u018a\11\134"+
    "\4\0\1\134\1\0\17\134\1\0\1\134\2\0\2\134"+
    "\3\0\6\134\17\0\1\u017e\16\0\3\u017e\13\0\1\u018b"+
    "\11\0\1\u017e\22\0\20\240\1\u018c\6\240\2\0\51\240"+
    "\11\0\4\163\1\u018d\11\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\14\163\1\u018e\1\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\10\163\1\u018f\5\163\4\0\21\163\1\0\1\163"+
    "\2\0\2\163\3\0\6\163\20\0\4\163\1\u0190\11\163"+
    "\4\0\21\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\16\134\4\0\1\134\1\0\16\134\1\u0191\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\134\4\0"+
    "\1\134\1\0\10\134\1\u0192\6\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\24\0\1\u0193\75\0\16\134\4\0"+
    "\1\134\1\0\11\134\1\u0194\5\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\15\134\1\u0195\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\16\134\4\0\1\134\1\0\5\134\1\u0196\11\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\20\0\11\134"+
    "\1\u0197\4\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\27\0\1\u0198\61\0\20\240"+
    "\1\u0199\6\240\2\0\51\240\11\0\16\163\4\0\13\163"+
    "\1\u019a\5\163\1\0\1\163\2\0\2\163\3\0\6\163"+
    "\20\0\15\163\1\u019b\4\0\21\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\20\0\16\163\4\0\7\163\1\u019c"+
    "\11\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\11\163\1\u019d\4\163\4\0\21\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\20\0\15\134\1\u0165\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\20\0\4\134\1\u0134\11\134\4\0\1\134\1\0\17\134"+
    "\1\0\1\134\2\0\2\134\3\0\6\134\7\0\27\u0193"+
    "\2\0\51\u0193\11\0\1\134\1\u019e\14\134\4\0\1\134"+
    "\1\0\17\134\1\0\1\134\2\0\2\134\3\0\6\134"+
    "\7\0\11\u019f\16\134\4\0\1\134\1\u019f\17\134\1\u019f"+
    "\1\134\2\u019f\2\134\3\u019f\6\134\7\u019f\11\0\4\134"+
    "\1\u01a0\11\134\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\16\134\4\0\1\134"+
    "\1\0\1\u01a1\16\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\27\0\1\u0199\61\0\27\u0199\2\0\51\u0199\11\0"+
    "\1\163\1\u01a2\14\163\4\0\21\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\7\0\11\u019f\16\163\4\0\21\163"+
    "\1\u019f\1\163\2\u019f\2\163\3\u019f\6\163\7\u019f\11\0"+
    "\4\163\1\u01a3\2\163\1\u01a4\6\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\16\163\4\0"+
    "\2\163\1\u01a5\16\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\4\134\1\u01a6\11\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\4\134\1\u01a7\11\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\4\163\1\u01a8"+
    "\11\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\7\163\1\u01a9\6\163\4\0\21\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\4\163\1\u01aa"+
    "\11\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\11\134\1\u01ab\4\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\16\134\4\0\1\134\1\0\7\134\1\u01ac\7\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\11\163\1\u01ad"+
    "\4\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\16\163\4\0\11\163\1\u01ae\7\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\3\134\1\u01af"+
    "\12\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\3\163\1\u01b0\12\163\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\15\134\1\u01b1\4\0\1\134\1\0\17\134\1\0\1\134"+
    "\2\0\2\134\3\0\6\134\20\0\15\163\1\u01b2\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\16\134\4\0\1\134\1\0\10\134\1\u01b3\6\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\16\163\4\0"+
    "\12\163\1\u01b4\6\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\4\134\1\u01b5\11\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\4\163\1\u01b6\11\163\4\0\21\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\20\0\16\134\4\0\1\134\1\0"+
    "\11\134\1\u01b7\5\134\1\0\1\134\2\0\2\134\3\0"+
    "\6\134\20\0\16\163\4\0\13\163\1\u01b8\5\163\1\0"+
    "\1\163\2\0\2\163\3\0\6\163\20\0\1\134\1\u01b9"+
    "\14\134\4\0\1\134\1\0\17\134\1\0\1\134\2\0"+
    "\2\134\3\0\6\134\20\0\1\163\1\u01ba\14\163\4\0"+
    "\21\163\1\0\1\163\2\0\2\163\3\0\6\163\20\0"+
    "\4\134\1\u01bb\11\134\4\0\1\134\1\0\17\134\1\0"+
    "\1\134\2\0\2\134\3\0\6\134\20\0\4\163\1\u01bc"+
    "\11\163\4\0\21\163\1\0\1\163\2\0\2\163\3\0"+
    "\6\163\20\0\11\134\1\u01bd\4\134\4\0\1\134\1\0"+
    "\17\134\1\0\1\134\2\0\2\134\3\0\6\134\20\0"+
    "\11\163\1\u01be\4\163\4\0\21\163\1\0\1\163\2\0"+
    "\2\163\3\0\6\163\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25014];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\2\1\6\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\2\1\4\11\1\1\1\11\3\1\6\11\1\1"+
    "\6\11\1\1\4\11\1\1\5\11\1\1\2\11\2\1"+
    "\1\11\3\1\3\11\24\1\1\11\1\1\3\11\17\1"+
    "\2\0\11\1\2\0\22\1\1\0\22\1\2\0\13\1"+
    "\2\0\17\1\1\0\20\1\1\0\1\11\12\1\2\0"+
    "\13\1\1\0\15\1\1\0\15\1\2\0\7\1\1\11"+
    "\3\1\1\0\12\1\1\11\12\1\1\0\10\1\1\0"+
    "\17\1\1\0\6\1\1\0\14\1\1\0\6\1\1\0"+
    "\11\1\1\0\4\1\1\0\7\1\1\0\4\1\1\0"+
    "\14\1\1\0\6\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Keep track of braces in the PREAMBLE_OPTION state.
   * We need to count braces in order to avoid exiting the state too early, especially in case of entering this state incorrectly
   * (for example because someone has >{ in their text for whatever reason).
   */
  private int preambleOptionBracesCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 75: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 76: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 77: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 78: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 80: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 82: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 84: break;
          case 11: 
            { return STAR;
            } 
            // fall through
          case 85: break;
          case 12: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 86: break;
          case 13: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 87: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 88: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 89: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 90: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 91: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 92: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 93: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 94: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 95: break;
          case 22: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 96: break;
          case 23: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 97: break;
          case 24: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 98: break;
          case 25: 
            { preambleOptionBracesCount++; return OPEN_BRACE;
            } 
            // fall through
          case 99: break;
          case 26: 
            { if (preambleOptionBracesCount == 0) {
          yypopState();
        }
        else {
            preambleOptionBracesCount--;
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 100: break;
          case 27: 
            { yypopState();
          newEnvironmentBracesNesting = 0;
          yypushState(NEW_ENVIRONMENT_DEFINITION);
          return CLOSE_BRACE;
            } 
            // fall through
          case 101: break;
          case 28: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 102: break;
          case 29: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have returned normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 103: break;
          case 30: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 104: break;
          case 31: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 105: break;
          case 32: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 106: break;
          case 33: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 107: break;
          case 34: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 108: break;
          case 35: 
            { yypopState(); yypushState(INLINE_VERBATIM_OPTIONAL_ARG); verbatimOptionalArgumentBracketsCount = 1; return OPEN_BRACKET;
            } 
            // fall through
          case 109: break;
          case 36: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 110: break;
          case 37: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 111: break;
          case 38: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 112: break;
          case 39: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 113: break;
          case 40: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 114: break;
          case 41: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 115: break;
          case 42: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(INLINE_VERBATIM_START); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 117: break;
          case 44: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 118: break;
          case 45: 
            { verbatimOptionalArgumentBracketsCount = 1; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 119: break;
          case 46: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 120: break;
          case 47: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 121: break;
          case 48: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 122: break;
          case 49: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 123: break;
          case 50: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 124: break;
          case 51: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 125: break;
          case 52: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 126: break;
          case 53: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 127: break;
          case 54: 
            { yypushState(PREAMBLE_OPTION); preambleOptionBracesCount = 0; return OPEN_BRACE;
            } 
            // fall through
          case 128: break;
          case 55: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 129: break;
          case 56: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 130: break;
          case 57: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 131: break;
          case 58: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 132: break;
          case 59: 
            { return END_TOKEN;
            } 
            // fall through
          case 133: break;
          case 60: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 134: break;
          case 61: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 135: break;
          case 62: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 136: break;
          case 63: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 137: break;
          case 64: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 138: break;
          case 65: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 139: break;
          case 66: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 140: break;
          case 67: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 141: break;
          case 68: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 142: break;
          case 69: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 143: break;
          case 70: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 144: break;
          case 71: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 145: break;
          case 72: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 146: break;
          case 73: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 147: break;
          case 74: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
