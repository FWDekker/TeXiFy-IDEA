/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int LATEX3 = 26;
  public static final int INLINE_VERBATIM_START = 28;
  public static final int INLINE_VERBATIM = 30;
  public static final int POSSIBLE_VERBATIM_BEGIN = 32;
  public static final int VERBATIM_OPTIONAL_ARG = 34;
  public static final int VERBATIM_START = 36;
  public static final int VERBATIM_END = 38;
  public static final int INLINE_VERBATIM_OPTIONAL_ARG = 40;
  public static final int VERBATIM = 42;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 44;
  public static final int POSSIBLE_VERBATIM_END = 46;
  public static final int PSEUDOCODE = 48;
  public static final int POSSIBLE_PSEUDOCODE_END = 50;
  public static final int OFF = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\57\1\56\1\100\1\0\1\73\1\62\1\76\1\0\1\2"+
    "\1\3\1\54\1\0\1\77\1\102\14\0\1\34\1\0\1\74\1\63\1\75\1\0\1\17\1\66\2\33\1"+
    "\52\1\35\1\65\2\33\1\67\2\33\1\71\1\33\1\47\1\42\1\51\1\33\1\50\1\40\1\60"+
    "\1\72\1\33\1\70\1\61\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16\1\12"+
    "\1\20\1\13\1\24\1\14\2\33\1\37\1\46\1\15\1\45\1\36\1\33\1\26\1\55\1\22\1\53"+
    "\1\44\1\43\1\21\1\41\1\33\1\6\1\101\1\7\7\0\1\32\32\0\1\64\337\0\1\64\177"+
    "\0\13\64\35\0\2\32\5\0\1\64\57\0\1\64\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\2"+
    "\1\27\3\2\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\2\1\35\1\36\1\37\1\40\1\41\1\42\1\2"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\54\1\55\1\56\1\57\1\60\1\61\1\2"+
    "\1\62\1\54\1\63\1\64\1\65\21\63\1\15\1\66"+
    "\1\15\1\67\1\63\1\70\1\71\1\72\17\63\2\0"+
    "\11\63\2\0\21\63\1\66\1\0\1\66\1\15\20\63"+
    "\2\0\7\63\1\73\3\63\2\0\1\63\1\74\14\63"+
    "\1\75\1\0\1\66\1\15\15\63\1\75\1\0\1\76"+
    "\1\77\4\63\1\73\4\63\2\0\7\63\1\75\3\63"+
    "\1\0\1\66\1\15\1\100\6\63\1\75\3\63\1\0"+
    "\5\63\1\101\7\63\2\0\1\102\6\63\1\75\3\63"+
    "\1\0\1\66\11\63\1\103\3\63\1\104\6\63\1\0"+
    "\10\63\1\0\1\66\16\63\1\0\6\63\1\0\1\66"+
    "\13\63\1\0\6\63\1\0\1\66\10\63\1\0\4\63"+
    "\1\0\1\66\6\63\1\0\4\63\1\0\1\66\6\63"+
    "\1\105\4\63\1\0\1\106\5\63\1\107\1\110\2\63"+
    "\1\110\5\63\1\111\1\63\1\112\1\63\1\112\17\63"+
    "\2\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[447];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u0797\0\u0797"+
    "\0\u0797\0\u0797\0\u0797\0\u07da\0\u0797\0\u0711\0\u0797\0\u081d"+
    "\0\u0797\0\u0797\0\u0860\0\u0860\0\u0797\0\u0797\0\u0797\0\u0797"+
    "\0\u08a3\0\u08e6\0\u0797\0\u0929\0\u096c\0\u09af\0\u0797\0\u0797"+
    "\0\u0797\0\u0797\0\u0797\0\u0797\0\u09f2\0\u0797\0\u0797\0\u0797"+
    "\0\u0797\0\u0797\0\u0797\0\u0a35\0\u0797\0\u0797\0\u0797\0\u0797"+
    "\0\u0a78\0\u0797\0\u0797\0\u0797\0\u0797\0\u0797\0\u0abb\0\u0797"+
    "\0\u0797\0\u0afe\0\u0b41\0\u0797\0\u0b84\0\u0bc7\0\u0c0a\0\u0797"+
    "\0\u0797\0\u0797\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u0797\0\u1189"+
    "\0\u0797\0\u0797\0\u0797\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180"+
    "\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398"+
    "\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u0cd3\0\u252a\0\u256d"+
    "\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u0cd3\0\u26bc\0\u26ff\0\u2742"+
    "\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a"+
    "\0\u299d\0\u0cd3\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u2dcd\0\u11cc\0\u2e10\0\u0797\0\u0cd3\0\u2e53\0\u2e96"+
    "\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u0cd3"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u0cd3\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0"+
    "\0\u3ae3\0\u3b26\0\u0cd3\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75"+
    "\0\u3cb8\0\u0797\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a"+
    "\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062"+
    "\0\u0797\0\u40a5\0\u40e8\0\u412b\0\u0cd3\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624"+
    "\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c"+
    "\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54"+
    "\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c"+
    "\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84"+
    "\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c"+
    "\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4"+
    "\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc"+
    "\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4"+
    "\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc"+
    "\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14"+
    "\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u0797"+
    "\0\u0cd3\0\u5d2c\0\u5d6f\0\u11cc\0\u5db2\0\u5df5\0\u5e38\0\u5e7b"+
    "\0\u5ebe\0\u11cc\0\u5f01\0\u0cd3\0\u5f44\0\u11cc\0\u5f87\0\u5fca"+
    "\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f\0\u61e2"+
    "\0\u6225\0\u6268\0\u62ab\0\u62ee\0\u6331\0\u0cd3\0\u11cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[447];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\34\1\62"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\63\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\34\1\64\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\65\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\16\34\3\44\1\45\21\34\1\46"+
    "\1\34\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\66\1\36\1\37\1\40\1\41\1\42\1\67"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\70\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\34\1\66"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\63\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\34\1\66\1\36\1\37"+
    "\1\40\1\41\1\71\1\72\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\73\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\66\1\36\1\37\1\40\1\41"+
    "\1\42\1\74\1\44\16\34\3\44\1\45\21\34\1\46"+
    "\1\34\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\45\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\75\1\36\1\37\1\40\1\41\1\76\1\77"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\73\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\34\1\66"+
    "\1\36\1\37\1\40\1\41\1\100\1\43\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\45\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\34\1\75\1\36\1\37"+
    "\1\40\1\41\1\76\1\101\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\73\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\66\1\36\1\37\1\40\1\41"+
    "\1\42\1\102\1\44\16\34\3\44\1\45\21\34\1\46"+
    "\1\34\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\45\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\66\1\36\1\37\1\40\1\41\1\76\1\103"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\45\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\34\1\104"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\45\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\4\105\1\106\1\105\1\107"+
    "\74\105\103\110\1\111\1\75\1\36\1\37\1\40\1\41"+
    "\1\76\1\67\1\44\16\111\3\44\1\45\23\111\1\47"+
    "\1\44\2\111\1\50\1\51\1\45\6\111\1\73\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\34\1\66"+
    "\1\36\1\37\1\112\1\113\1\42\1\43\1\44\16\34"+
    "\3\44\1\45\21\34\1\46\1\34\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\45\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\34\1\66\1\36\1\37"+
    "\1\40\1\41\1\42\1\114\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\66\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\16\34\3\44\1\45\21\34\1\46"+
    "\1\34\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\45\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\66\1\36\1\37\1\112\1\115\1\42\1\43"+
    "\1\44\16\34\3\44\1\45\21\34\1\46\1\34\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\45\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\116\1\117"+
    "\6\116\1\44\16\116\3\44\25\116\1\44\23\116\4\120"+
    "\1\121\3\120\1\122\16\120\3\122\25\120\1\122\23\120"+
    "\1\123\5\124\1\42\2\124\16\123\4\124\23\123\2\124"+
    "\2\123\3\124\6\123\10\124\1\34\1\125\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\16\34\3\44\1\45"+
    "\21\34\1\46\1\34\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\126\1\66\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\16\126\3\44\1\45\23\126\1\47"+
    "\1\44\2\126\1\50\1\51\1\45\6\126\1\45\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\62\116\1\127"+
    "\20\116\1\34\10\0\16\34\4\0\23\34\2\0\2\34"+
    "\3\0\6\34\10\0\2\130\1\131\1\130\1\132\4\130"+
    "\1\133\1\134\2\135\1\136\1\137\1\140\4\135\1\141"+
    "\1\135\1\142\1\0\1\130\2\0\1\135\1\130\1\143"+
    "\1\144\1\145\4\135\1\146\2\135\1\147\1\150\1\151"+
    "\1\152\1\153\1\130\1\135\2\130\2\135\3\130\6\135"+
    "\10\130\113\0\1\44\16\0\3\44\25\0\1\44\23\0"+
    "\27\154\2\0\25\154\1\155\1\156\23\154\6\0\1\157"+
    "\176\0\1\61\4\130\1\132\4\130\1\133\1\134\2\135"+
    "\1\136\1\137\1\140\2\135\1\160\1\135\1\141\1\135"+
    "\1\142\1\0\1\130\2\0\1\135\1\130\1\143\1\144"+
    "\1\145\4\135\1\146\2\135\1\147\1\150\1\151\1\152"+
    "\1\153\1\130\1\135\2\130\2\135\3\130\6\135\13\130"+
    "\1\63\1\132\4\130\1\133\1\134\2\135\1\136\1\137"+
    "\1\140\4\135\1\141\1\135\1\142\1\0\1\130\2\0"+
    "\1\135\1\130\1\143\1\144\1\145\4\135\1\146\2\135"+
    "\1\147\1\150\1\151\1\152\1\153\1\130\1\135\2\130"+
    "\2\135\3\130\6\135\12\130\1\131\1\130\1\132\1\161"+
    "\3\130\1\133\1\134\2\135\1\136\1\137\1\140\4\135"+
    "\1\141\1\135\1\142\1\0\1\130\2\0\1\135\1\130"+
    "\1\143\1\144\1\145\4\135\1\146\2\135\1\147\1\150"+
    "\1\151\1\152\1\153\1\130\1\135\2\130\2\135\3\130"+
    "\6\135\14\130\1\132\4\130\1\133\1\134\2\135\1\136"+
    "\1\137\1\140\4\135\1\141\1\135\1\142\1\0\1\130"+
    "\2\0\1\135\1\130\1\143\1\144\1\145\4\135\1\146"+
    "\2\135\1\147\1\150\1\151\1\152\1\153\1\130\1\135"+
    "\2\130\2\135\3\130\6\135\14\130\1\162\1\163\3\130"+
    "\1\133\1\134\2\135\1\136\1\137\1\140\4\135\1\141"+
    "\1\135\1\142\1\0\1\130\2\0\1\135\1\130\1\143"+
    "\1\144\1\145\4\135\1\146\2\135\1\147\1\150\1\151"+
    "\1\152\1\153\1\130\1\135\2\130\2\135\3\130\6\135"+
    "\14\130\1\132\4\130\4\164\1\165\1\166\1\167\4\164"+
    "\1\170\1\164\1\171\1\0\1\130\2\0\2\164\1\172"+
    "\1\173\1\174\4\164\1\175\2\164\1\176\1\177\1\200"+
    "\1\201\1\202\1\130\1\164\2\130\2\164\3\130\6\164"+
    "\10\130\1\111\10\0\16\111\4\0\23\111\2\0\2\111"+
    "\3\0\6\111\21\0\1\203\1\204\100\0\1\122\16\0"+
    "\3\122\25\0\1\122\23\0\1\123\10\0\16\123\4\0"+
    "\23\123\2\0\2\123\3\0\6\123\10\0\2\130\1\131"+
    "\1\130\1\132\4\130\1\133\1\205\2\135\1\136\1\137"+
    "\1\140\4\135\1\141\1\135\1\142\1\0\1\130\2\0"+
    "\1\135\1\130\1\206\1\144\1\145\4\135\1\146\2\135"+
    "\1\147\1\207\1\210\1\152\1\153\1\130\1\135\2\130"+
    "\2\135\3\130\1\211\1\135\1\212\1\213\1\214\1\215"+
    "\10\130\1\126\10\0\16\126\4\0\23\126\2\0\2\126"+
    "\3\0\6\126\66\0\1\216\1\217\34\0\1\135\1\220"+
    "\14\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\4\135\1\221\11\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\16\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\1\135\1\222"+
    "\14\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\3\135\1\223\12\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\3\135\1\224\12\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\15\135\1\225\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\1\135\1\226\14\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\10\135\1\227\5\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\14\135\1\230\1\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\135"+
    "\4\0\1\135\1\0\16\135\1\231\1\0\1\232\2\0"+
    "\2\135\3\0\6\135\21\0\1\135\1\233\14\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\1\135\1\234\14\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\1\135\1\235\14\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\15\135\1\236"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\1\135\1\237\14\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\15\135\1\240\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\10\0\27\154\2\0"+
    "\52\154\10\241\1\155\16\241\2\242\1\155\4\241\1\243"+
    "\20\241\1\155\23\241\27\154\2\0\25\154\1\244\24\154"+
    "\11\0\1\135\1\245\14\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\1\164\1\246\14\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\3\164\1\247\12\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\3\164\1\250\12\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\15\164\1\251\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\1\164\1\252\14\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\10\164\1\253\5\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\14\164\1\254\1\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\16\164\4\0\20\164\1\255"+
    "\1\0\1\256\2\0\2\164\3\0\6\164\21\0\1\164"+
    "\1\257\14\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\1\164\1\260\14\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\1\164"+
    "\1\261\14\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\15\164\1\262\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\1\164\1\263"+
    "\14\164\4\0\21\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\21\0\15\164\1\264\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\22\0\1\265\105\0\1\266"+
    "\76\0\4\135\1\267\11\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\4\135"+
    "\1\270\3\135\1\227\5\135\4\0\1\135\1\0\2\135"+
    "\1\271\14\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\1\135\1\272\14\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\15\135"+
    "\1\273\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\135\4\0\1\135\1\0"+
    "\10\135\1\274\5\135\1\275\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\7\135\1\276\6\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\13\135\1\277\2\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\135"+
    "\4\0\1\135\1\0\10\135\1\300\6\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\4\135\1\301\11\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\20\0\1\216\16\0\3\216\4\0\1\302"+
    "\20\0\1\216\101\0\1\303\35\0\2\135\1\304\13\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\5\135\1\305\10\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\16\135\4\0\1\135\1\0\6\135\1\306\10\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\15\135"+
    "\1\307\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\7\135\1\310\6\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\1\135\1\311\14\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\4\135\1\136\11\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\1\135\1\312\15\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\11\135\1\313\4\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\14\135\1\314\1\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\11\135\1\315\4\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\15\135\1\316"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\16\135\4\0\1\135\1\0\6\135"+
    "\1\317\10\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\4\135\1\147\11\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\135"+
    "\4\0\1\135\1\0\10\135\1\320\6\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\12\135\1\321\3\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\16\135\4\0\1\135\1\0\2\135"+
    "\1\322\14\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\10\0\27\241\2\0\52\241\10\0\1\242\16\0\3\242"+
    "\4\0\1\323\20\0\1\242\23\0\25\241\1\324\1\241"+
    "\2\0\52\241\22\154\1\325\4\154\2\0\27\154\1\325"+
    "\22\154\11\0\10\135\1\326\5\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\16\164\4\0\10\164\1\327\10\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\15\164\1\330\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\7\164"+
    "\1\331\6\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\1\164\1\332\14\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\4\164"+
    "\1\165\11\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\16\164\4\0\3\164\1\333\15\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\11\164"+
    "\1\334\4\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\14\164\1\335\1\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\11\164"+
    "\1\336\4\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\15\164\1\337\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\16\164\4\0"+
    "\10\164\1\340\10\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\21\0\4\164\1\176\11\164\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\16\164\4\0"+
    "\12\164\1\341\6\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\21\0\12\164\1\342\3\164\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\16\164\4\0"+
    "\4\164\1\343\14\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\23\0\1\344\105\0\1\345\75\0\5\135\1\346"+
    "\10\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\5\135\1\347\10\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\16\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\350\2\0\2\135\3\0\6\135\21\0\4\135\1\147"+
    "\11\135\4\0\1\135\1\0\1\135\1\351\15\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\10\135\1\352\6\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\15\135\1\353\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\4\135\1\354\11\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\3\135"+
    "\1\355\12\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\16\135\4\0\1\135"+
    "\1\0\10\135\1\356\6\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\11\135\1\357\4\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\35\0\1\360\77\0\1\361\35\0\1\361\33\0\3\135"+
    "\1\362\12\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\1\135\1\363\14\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\1\135\1\364\14\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\4\135\1\365\11\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\7\135"+
    "\1\322\6\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\16\135\4\0\1\135"+
    "\1\0\2\135\1\366\14\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\13\135\1\322\2\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\1\135\1\367\14\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\3\135"+
    "\1\370\12\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\1\371\15\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\16\135\4\0\1\135\1\0\15\135\1\372"+
    "\1\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\16\135\4\0\1\135\1\0\7\135\1\373\7\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\2\135\1\374\14\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\35\0\1\375\55\0\26\241\1\376"+
    "\2\0\52\241\12\154\1\377\14\154\2\0\4\154\1\377"+
    "\45\154\11\0\11\135\1\u0100\4\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\1\164\1\u0101\14\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\1\164\1\u0102\14\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\4\164\1\u0103\11\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\7\164\1\343\6\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\16\164\4\0\4\164\1\u0104\14\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\13\164\1\343\2\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\1\164\1\u0105\14\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\3\164\1\u0106\12\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\1\u0107\15\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\16\164\4\0\17\164\1\u0108\1\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\16\164"+
    "\4\0\11\164\1\u0109\7\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\16\164\4\0\4\164\1\u010a\14\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\24\0\1\u010b"+
    "\77\0\16\135\4\0\1\135\1\0\14\135\1\u010c\2\135"+
    "\1\0\1\135\2\0\2\135\3\0\1\u010d\1\135\1\u010e"+
    "\1\u010f\1\u0110\1\135\21\0\1\135\1\u0111\14\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\2\135\1\u0112\3\135\21\0\1\135\1\u0113\14\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\12\135\1\u0114\3\135\4\0\1\135\1\0"+
    "\7\135\1\373\7\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\16\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\1\135\1\u0115\4\135\21\0"+
    "\12\135\1\u0116\3\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\2\135\1\u0117\14\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\135\4\0\1\135\1\0"+
    "\1\135\1\276\15\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\3\135\1\u0118\12\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\36\0"+
    "\1\u0119\66\0\1\u011a\22\0\1\u011a\56\0\4\135\1\u011b"+
    "\11\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\4\135\1\u011c\11\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\12\135\1\u011d\3\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\1\135\1\u011e\14\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\3\135\1\u011f\13\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\10\135\1\u0120\5\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\4\135\1\u0121\11\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\16\135\4\0\1\135\1\0\17\135\1\u0122\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\135\4\0\1\135\1\0"+
    "\10\135\1\u0123\6\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\3\135\1\u0124\12\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\14\135\1\u0125\1\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\36\0\1\u0126\54\0"+
    "\27\241\2\0\24\241\1\u0127\25\241\21\154\1\155\5\154"+
    "\2\0\30\154\1\155\21\154\11\0\4\164\1\u0128\11\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\12\164\1\u0129\3\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\1\164\1\u012a\14\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\16\164\4\0\5\164\1\u012b\13\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\10\164\1\u012c\5\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\4\164\1\u012d\11\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\16\164\4\0\21\164"+
    "\1\u0122\1\164\2\0\2\164\3\0\6\164\21\0\16\164"+
    "\4\0\12\164\1\u012e\6\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\3\164\1\u012f\12\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\14\164"+
    "\1\u0130\1\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\25\0\1\u0131\76\0\15\135\1\u0132\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\16\135\4\0\1\135\1\0\10\135\1\u0133"+
    "\5\135\1\u0134\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\7\135\1\u0135\6\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\13\135"+
    "\1\u0136\2\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\16\135\4\0\1\135"+
    "\1\0\10\135\1\u0137\6\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\7\135\1\u0111\6\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\14\135\1\u0138\1\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\1\135"+
    "\1\u0139\14\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\16\135\4\0\1\135"+
    "\1\0\2\135\1\u013a\14\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\11\135\1\u013b\4\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\1\135\1\276\14\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\135"+
    "\4\0\1\135\1\0\2\135\1\u0135\14\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\65\0\1\u013c\46\0\1\216"+
    "\37\0\1\216\32\0\16\135\4\0\1\135\1\0\7\135"+
    "\1\u013d\7\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\11\135\1\u013e\4\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\10\135"+
    "\1\u013f\5\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\16\135\4\0\1\135"+
    "\1\0\4\135\1\u0140\12\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\1\135\1\u0141\14\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\16\135\4\0\1\135\1\0\2\135\1\u0142\14\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\12\135"+
    "\1\u0143\3\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\5\135\1\u0144\10\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\15\135\1\u0144\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\65\0"+
    "\1\u0145\25\0\12\241\1\u0146\14\241\2\0\52\241\11\0"+
    "\16\164\4\0\11\164\1\u0147\7\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\11\164\1\u0148\4\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\10\164\1\u0149\5\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\16\164\4\0\6\164\1\u014a"+
    "\12\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\1\164\1\u014b\14\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\16\164\4\0\4\164\1\u014c"+
    "\14\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\12\164\1\u014d\3\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\5\164\1\u014e\10\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\15\164\1\u014e\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\16\135\4\0\1\135\1\0\10\135"+
    "\1\u014f\6\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\15\135\1\u0135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\4\135\1\u0150"+
    "\11\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\3\135\1\u0151\12\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\16\135\4\0\1\135\1\0\10\135\1\u0152"+
    "\6\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\11\135\1\276\4\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\5\135\1\u0153"+
    "\10\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\135\4\0\1\135\1\0"+
    "\2\135\1\276\14\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\3\135\1\u0154\12\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\22\0"+
    "\1\u0155\101\0\3\135\1\u0156\12\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\16\135\4\0\1\135\1\0\2\135\1\u0157\14\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\11\135\1\u0158"+
    "\4\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\4\135\1\u0159\11\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\12\135\1\322\3\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\3\135\1\u015a\12\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\16\135\1\u015b\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\1\135\1\317\14\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\22\0\1\u015c\70\0\26\241\1\u015d\2\0\52\241\11\0"+
    "\3\164\1\u015e\12\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\16\164\4\0\4\164\1\u015f"+
    "\14\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\11\164\1\u0160\4\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\4\164\1\u0161\11\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\12\164\1\343\3\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\3\164\1\u0162\12\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\16\164\4\0\20\164\1\u0163\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\1\164\1\340\14\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\12\135"+
    "\1\u0164\3\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\12\135\1\u0165\3\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\16\135\4\0\1\135\1\0\2\135"+
    "\1\u0166\14\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\16\135\4\0\1\135\1\0\1\135\1\u0135\15\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\135"+
    "\4\0\1\135\1\0\16\135\1\u0167\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\135\4\0\1\135\1\0"+
    "\10\135\1\u0168\6\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\36\0\1\u0169\65\0\15\135\1\u016a\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\21\0\16\135\4\0\1\135\1\0\16\135\1\u016b\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\12\135\1\u016c"+
    "\3\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\11\135\1\u016d\4\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\4\135\1\u016e\11\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\16\135\4\0\1\135\1\0\11\135\1\u016f\5\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\36\0\1\u0170\54\0"+
    "\10\241\1\u015d\16\241\2\u0170\1\u015d\25\241\1\u015d\3\241"+
    "\1\u0171\17\241\11\0\15\164\1\u0172\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\16\164\4\0"+
    "\20\164\1\u0173\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\12\164\1\u0174\3\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\11\164\1\u0175\4\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\4\164\1\u0176\11\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\16\164\4\0\13\164"+
    "\1\u0177\5\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\1\135\1\u0178\14\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\11\135"+
    "\1\u0179\4\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\1\135\1\u0135\14\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\15\135\1\u0117\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\4\135\1\276\11\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\20\0\1\u0169\16\0"+
    "\3\u0169\25\0\1\u0169\3\0\1\u017a\30\0\16\135\4\0"+
    "\1\135\1\0\10\135\1\u017b\6\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\14\135\1\322\1\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\13\135\1\u017c\2\135\4\0\1\135\1\0"+
    "\17\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\14\135\1\u017d\1\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\1\135\1\322"+
    "\14\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\1\135\1\u017e\14\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\20\0\1\u0170\16\0\3\u0170\25\0\1\u0170\3\0"+
    "\1\u017f\17\0\10\241\1\u0171\16\241\2\u017f\1\u0171\13\241"+
    "\1\u0180\11\241\1\u0171\23\241\11\0\16\164\4\0\12\164"+
    "\1\u0181\6\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\14\164\1\343\1\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\13\164\1\u0182\2\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\14\164\1\u0183\1\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\1\164\1\343\14\164"+
    "\4\0\21\164\1\0\1\164\2\0\2\164\3\0\6\164"+
    "\21\0\1\164\1\u0184\14\164\4\0\21\164\1\0\1\164"+
    "\2\0\2\164\3\0\6\164\21\0\5\135\1\u0185\10\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\3\135\1\u0186\12\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\20\0\1\u017a\16\0\3\u017a\13\0\1\u0187\11\0\1\u017a"+
    "\34\0\4\135\1\u0188\11\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\14\135"+
    "\1\u0189\1\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\10\135\1\u018a\5\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\4\135\1\u018b\11\135\4\0\1\135"+
    "\1\0\17\135\1\0\1\135\2\0\2\135\3\0\6\135"+
    "\20\0\1\u017f\16\0\3\u017f\13\0\1\u018c\11\0\1\u017f"+
    "\23\0\20\241\1\u018d\6\241\2\0\52\241\11\0\4\164"+
    "\1\u018e\11\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\14\164\1\u018f\1\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\10\164"+
    "\1\u0190\5\164\4\0\21\164\1\0\1\164\2\0\2\164"+
    "\3\0\6\164\21\0\4\164\1\u0191\11\164\4\0\21\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\16\135"+
    "\4\0\1\135\1\0\16\135\1\u0192\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\135\4\0\1\135\1\0"+
    "\10\135\1\u0193\6\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\25\0\1\u0194\76\0\16\135\4\0\1\135\1\0"+
    "\11\135\1\u0195\5\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\15\135\1\u0196\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\16\135"+
    "\4\0\1\135\1\0\5\135\1\u0197\11\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\21\0\11\135\1\u0198\4\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\30\0\1\u0199\62\0\20\241\1\u019a\6\241"+
    "\2\0\52\241\11\0\16\164\4\0\13\164\1\u019b\5\164"+
    "\1\0\1\164\2\0\2\164\3\0\6\164\21\0\15\164"+
    "\1\u019c\4\0\21\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\21\0\16\164\4\0\7\164\1\u019d\11\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\11\164\1\u019e"+
    "\4\164\4\0\21\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\21\0\15\135\1\u0166\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\21\0\4\135"+
    "\1\u0135\11\135\4\0\1\135\1\0\17\135\1\0\1\135"+
    "\2\0\2\135\3\0\6\135\10\0\27\u0194\2\0\52\u0194"+
    "\11\0\1\135\1\u019f\14\135\4\0\1\135\1\0\17\135"+
    "\1\0\1\135\2\0\2\135\3\0\6\135\10\0\11\u01a0"+
    "\16\135\4\0\1\135\1\u01a0\17\135\1\u01a0\1\135\2\u01a0"+
    "\2\135\3\u01a0\6\135\10\u01a0\11\0\4\135\1\u01a1\11\135"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\16\135\4\0\1\135\1\0\1\u01a2"+
    "\16\135\1\0\1\135\2\0\2\135\3\0\6\135\30\0"+
    "\1\u019a\62\0\27\u019a\2\0\52\u019a\11\0\1\164\1\u01a3"+
    "\14\164\4\0\21\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\10\0\11\u01a0\16\164\4\0\21\164\1\u01a0\1\164"+
    "\2\u01a0\2\164\3\u01a0\6\164\10\u01a0\11\0\4\164\1\u01a4"+
    "\2\164\1\u01a5\6\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\16\164\4\0\2\164\1\u01a6"+
    "\16\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\4\135\1\u01a7\11\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\4\135\1\u01a8"+
    "\11\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\4\164\1\u01a9\11\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\7\164\1\u01aa\6\164\4\0\21\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\4\164\1\u01ab\11\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\11\135\1\u01ac\4\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\16\135\4\0"+
    "\1\135\1\0\7\135\1\u01ad\7\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\11\164\1\u01ae\4\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\16\164\4\0\11\164\1\u01af\7\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\3\135\1\u01b0\12\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\3\164\1\u01b1\12\164\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\15\135\1\u01b2"+
    "\4\0\1\135\1\0\17\135\1\0\1\135\2\0\2\135"+
    "\3\0\6\135\21\0\15\164\1\u01b3\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\16\135\4\0"+
    "\1\135\1\0\10\135\1\u01b4\6\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\16\164\4\0\12\164\1\u01b5"+
    "\6\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\4\135\1\u01b6\11\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\4\164\1\u01b7"+
    "\11\164\4\0\21\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\21\0\16\135\4\0\1\135\1\0\11\135\1\u01b8"+
    "\5\135\1\0\1\135\2\0\2\135\3\0\6\135\21\0"+
    "\16\164\4\0\13\164\1\u01b9\5\164\1\0\1\164\2\0"+
    "\2\164\3\0\6\164\21\0\1\135\1\u01ba\14\135\4\0"+
    "\1\135\1\0\17\135\1\0\1\135\2\0\2\135\3\0"+
    "\6\135\21\0\1\164\1\u01bb\14\164\4\0\21\164\1\0"+
    "\1\164\2\0\2\164\3\0\6\164\21\0\4\135\1\u01bc"+
    "\11\135\4\0\1\135\1\0\17\135\1\0\1\135\2\0"+
    "\2\135\3\0\6\135\21\0\4\164\1\u01bd\11\164\4\0"+
    "\21\164\1\0\1\164\2\0\2\164\3\0\6\164\21\0"+
    "\11\135\1\u01be\4\135\4\0\1\135\1\0\17\135\1\0"+
    "\1\135\2\0\2\135\3\0\6\135\21\0\11\164\1\u01bf"+
    "\4\164\4\0\21\164\1\0\1\164\2\0\2\164\3\0"+
    "\6\164\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\2\1\6\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\2\1\4\11\2\1\1\11\3\1\6\11\1\1"+
    "\6\11\1\1\4\11\1\1\5\11\1\1\2\11\2\1"+
    "\1\11\3\1\3\11\24\1\1\11\1\1\3\11\17\1"+
    "\2\0\11\1\2\0\22\1\1\0\22\1\2\0\13\1"+
    "\2\0\17\1\1\0\20\1\1\0\1\11\12\1\2\0"+
    "\13\1\1\0\15\1\1\0\15\1\2\0\7\1\1\11"+
    "\3\1\1\0\12\1\1\11\12\1\1\0\10\1\1\0"+
    "\17\1\1\0\6\1\1\0\14\1\1\0\6\1\1\0"+
    "\11\1\1\0\4\1\1\0\7\1\1\0\4\1\1\0"+
    "\14\1\1\0\6\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[447];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Keep track of braces in the PREAMBLE_OPTION state.
   * We need to count braces in order to avoid exiting the state too early, especially in case of entering this state incorrectly
   * (for example because someone has >{ in their text for whatever reason).
   */
  private int preambleOptionBracesCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 76: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 77: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 78: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 79: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 80: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 82: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 83: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 84: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 85: break;
          case 11: 
            { return STAR;
            } 
            // fall through
          case 86: break;
          case 12: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 87: break;
          case 13: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 88: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 89: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 90: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 91: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 92: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 93: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 94: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 95: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 96: break;
          case 22: 
            { return DASH;
            } 
            // fall through
          case 97: break;
          case 23: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 98: break;
          case 24: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 99: break;
          case 25: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 100: break;
          case 26: 
            { preambleOptionBracesCount++; return OPEN_BRACE;
            } 
            // fall through
          case 101: break;
          case 27: 
            { if (preambleOptionBracesCount == 0) {
          yypopState();
        }
        else {
            preambleOptionBracesCount--;
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 102: break;
          case 28: 
            { yypopState();
          newEnvironmentBracesNesting = 0;
          yypushState(NEW_ENVIRONMENT_DEFINITION);
          return CLOSE_BRACE;
            } 
            // fall through
          case 103: break;
          case 29: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 104: break;
          case 30: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have returned normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 105: break;
          case 31: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 106: break;
          case 32: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 107: break;
          case 33: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 108: break;
          case 34: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 109: break;
          case 35: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 110: break;
          case 36: 
            { yypopState(); yypushState(INLINE_VERBATIM_OPTIONAL_ARG); verbatimOptionalArgumentBracketsCount = 1; return OPEN_BRACKET;
            } 
            // fall through
          case 111: break;
          case 37: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 112: break;
          case 38: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 113: break;
          case 39: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 114: break;
          case 40: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 115: break;
          case 41: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 116: break;
          case 42: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 117: break;
          case 43: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(INLINE_VERBATIM_START); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 118: break;
          case 44: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 119: break;
          case 45: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 120: break;
          case 46: 
            { verbatimOptionalArgumentBracketsCount = 1; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 121: break;
          case 47: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 122: break;
          case 48: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 123: break;
          case 49: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 124: break;
          case 50: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 125: break;
          case 51: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 126: break;
          case 52: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 127: break;
          case 53: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 128: break;
          case 54: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 129: break;
          case 55: 
            { yypushState(PREAMBLE_OPTION); preambleOptionBracesCount = 0; return OPEN_BRACE;
            } 
            // fall through
          case 130: break;
          case 56: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 131: break;
          case 57: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 132: break;
          case 58: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 133: break;
          case 59: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 134: break;
          case 60: 
            { return END_TOKEN;
            } 
            // fall through
          case 135: break;
          case 61: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 136: break;
          case 62: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 137: break;
          case 63: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 138: break;
          case 64: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 139: break;
          case 65: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 140: break;
          case 66: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 141: break;
          case 67: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 142: break;
          case 68: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 143: break;
          case 69: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 144: break;
          case 70: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 145: break;
          case 71: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 146: break;
          case 72: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 147: break;
          case 73: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 148: break;
          case 74: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 149: break;
          case 75: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
